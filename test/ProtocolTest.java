import fr.main.sniffer.reader.InitListener;
import fr.main.sniffer.reader.InputReader;
import fr.main.sniffer.reader.Protocol;
import fr.main.sniffer.reader.Protocol2;
import fr.main.sniffer.reader.utils.DofusDataReader;
import fr.main.sniffer.tools.protocol.Message;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.List;

import static org.junit.Assert.*;

public class ProtocolTest {

    @Before
    public void init() throws IOException, InterruptedException {
        InitListener.generateProtocol();
    }

    @Test
    public void testGetMessageId(){
        Protocol2 protocol = new Protocol2();
        Message message = protocol.getMessage(6312);
        assertNotNull(message);
        assertEquals("GameActionFightLifePointsLostMessage",message.getName());
    }

    @Test
    public void testGetParents() throws Exception {
        Protocol2 protocol = new Protocol2();
        Message message = protocol.getMessage(6310);
        List<Message> list = protocol.getParents(message);
        assertEquals(2,list.size());
        for(Message s : list){
            System.out.println(s.getName());
        }
    }

    @Test
    public void testGetParents2() throws Exception {
        Protocol2 protocol = new Protocol2();
        Message message = protocol.getMessage("ZaapListMessage");
        List<Message> list = protocol.getParents(message);
        assertEquals(1,list.size());
        assertEquals("TeleportDestinationsListMessage",list.get(0).getName());
        for(Message s : list){
            System.out.println(s.getName());
        }
    }

    @Test
    public void testDeserializeNoParents() throws Exception {
        byte [] data = InputReader.toByteArray("000007390000073F");
        DofusDataReader reader = new DofusDataReader(new ByteArrayInputStream(data));
        Protocol2 protocol = new Protocol2(reader);
        Message message = protocol.getMessage("ProtocolRequired");
        List<String> list = protocol.deserialize(message);
        assertEquals(2,list.size());
        for(String s : list){
            System.out.println(s);
        }
    }

    @Test
    public void testDeserializeNoParentsBBW() throws Exception {
        byte [] data = InputReader.toByteArray("0000087775626C656C3132000B5755424C454C444F555A4507737BA30000004276234EED0A80004122750000000000000000000000000001");
        DofusDataReader reader = new DofusDataReader(new ByteArrayInputStream(data));
        Protocol2 protocol = new Protocol2(reader);
        Message message = protocol.getMessage("IdentificationSuccessMessage");
        List<String> list = protocol.deserialize(message);
        assertEquals(11,list.size());
        for(String s : list){
            System.out.println(s);
        }
    }

    @Test
    public void testDeserializeParents() throws Exception {
        byte [] data = InputReader.toByteArray
        DofusDataReader reader = new DofusDataReader(new ByteArrayInputStream(data));
        Protocol2 protocol = new Protocol2(reader);
        Message message = protocol.getMessage("ZaapListMessage");
        List<String> list = protocol.deserialize(message);
        for(String s : list){
            System.out.println(s);
        }
        assertTrue(list.size() > 1);
        assertEquals("spawnMapId: 1.53092354E8", list.get(list.size() - 1));
    }

    @Test
    public void testDeserializeClassField() throws Exception {
        byte [] data = InputReader.toByteArray
        DofusDataReader reader = new DofusDataReader(new ByteArrayInputStream(data));
        Protocol2 protocol = new Protocol2(reader);
        Message message = protocol.getMessage("InventoryContentMessage");
        List<String> list = protocol.deserialize(message);
        for(String s : list){
            System.out.println(s);
        }
        assertTrue(list.size() > 1);
        assertTrue(list.get(list.size() - 1).contains("kamas"));
    }

    @Test
    public void testDeserializeMap() throws Exception {
        byte [] data = InputReader.toByteArray
        DofusDataReader reader = new DofusDataReader(new ByteArrayInputStream(data));
        Protocol protocol = new Protocol();
        List<String> list =  protocol.getData(226,reader);
        for(String s : list){
            System.out.println(s);
        }
        assertTrue(list.size() > 10);
        assertTrue(list.get(list.size() - 1).contains("positionsForDefenders"));
    }


    @Test
    public void testDeserializeMap2() throws Exception {
        byte [] data = InputReader.toByteArray
        DofusDataReader reader = new DofusDataReader(new ByteArrayInputStream(data));
        Protocol2 protocol = new Protocol2(reader);
        Message message = protocol.getMessage("MapComplementaryInformationsDataMessage");
        List<String> list = protocol.deserialize(message);
        for(String s : list){
            System.out.println(s);
        }
        assertTrue(list.size() > 10);
        assertTrue(list.get(list.size() - 1).contains("positionsForDefenders"));
    }


}
